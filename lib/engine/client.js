var Base = require('../base')
var Request = require('../http/request')
var Response = require('../http/response')

module.exports = Client

/**
 * EngineClient the root public API interface generated by the rendered.
 *
 * Provides full middleware capabitilies.
 *
 * @param {Client} client - Root Client entity instance.
 * @constructor
 * @class EngineClient
 * @extends {Base}
 */

function Client (client) {
  this._client = client
  this._client.publicClient = this
  Base.defineAccessors(this._client, this)
}

// Delegates Base methods via Client prototype
Object.keys(Base.prototype).forEach(function (method) {
  Client.prototype[method] = function () {
    var ctx = this._client[method].apply(this._client, arguments)
    return ctx === this._client
      ? this
      : ctx
  }
})

/**
 * Utility method to perform a context-based HTTP request using the default agent.
 *
 * @param {Context} ctx
 * @param {Function} cb
 * @return {Object|ReadableStream}
 * @method doRequest
 */

Client.prototype.doRequest = function (ctx, cb) {
  ctx = ctx || {}
  var res = new Response(ctx)
  return this._client.ctx.agent(ctx, res, cb)
}

/**
 * Creates a new Request instance, optionally inheriting context and config from a custom entity.
 *
 * @param {Client} client
 * @return {Request}
 * @method newRequest
 */

Client.prototype.newRequest = function (entity) {
  var req = new Request()
  req.useParent(entity || this._client)
  return req
}

/**
 * Performs a custom GET request based on the given options
 *
 * @param {Object} opts
 * @param {Function} cb
 * @method GET
 * @return {Object|ReadableStream}
 * @memberof {Client}
 * @instance
 */

/**
 * Performs a custom POST request based on the given options
 *
 * @param {Object} opts
 * @param {Function} cb
 * @method POST
 * @return {Object|ReadableStream}
 * @memberof {Client}
 * @instance
 */

/**
 * Performs a custom PUT request based on the given options
 *
 * @param {Object} opts
 * @param {Function} cb
 * @method PUT
 * @return {Object|ReadableStream}
 * @memberof {Client}
 * @instance
 */

/**
 * Performs a custom PATCH request based on the given options
 *
 * @param {Object} opts
 * @param {Function} cb
 * @method PATCH
 * @return {Object|ReadableStream}
 * @memberof {Client}
 * @instance
 */

/**
 * Performs a custom DELETE request based on the given options
 *
 * @param {Object} opts
 * @param {Function} cb
 * @method DELETE
 * @return {Object|ReadableStream}
 * @memberof {Client}
 * @instance
 */

/**
 * Performs a custom HEAD request based on the given options
 *
 * @param {Object} opts
 * @param {Function} cb
 * @method HEAD
 * @return {Object|ReadableStream}
 * @memberof {Client}
 * @instance
 */

/**
 * Performs a custom TRACE request based on the given options
 *
 * @param {Object} opts
 * @param {Function} cb
 * @method TRACE
 * @return {Object|ReadableStream}
 * @memberof {Client}
 * @instance
 */

/**
 * Performs a custom OPTIONS request based on the given options
 *
 * @param {Object} opts
 * @param {Function} cb
 * @method OPTIONS
 * @return {Object|ReadableStream}
 * @memberof {Client}
 * @instance
 */

// Deletegates HTTP verbs as API sugar
var verbs = [
  'GET',
  'POST',
  'PUT',
  'PATCH',
  'DELETE',
  'HEAD',
  'TRACE',
  'OPTIONS'
]

verbs.forEach(function (method) {
  Client.prototype[method] = function (opts, cb) {
    opts.method = method
    return this.doRequest(opts, cb)
  }
})
